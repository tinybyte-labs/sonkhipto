// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String   @id @default(uuid()) @db.Uuid
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  userId                   String   @db.Uuid
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?  @db.Text
  access_token             String?  @db.Text
  refresh_token_expires_in Int?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserRole {
  ADMIN
  WRITER
  USER
}

model User {
  id            String    @id @default(uuid()) @db.Uuid
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  email         String?   @unique
  name          String?
  emailVerified DateTime?
  image         String?
  isAnonymous   Boolean   @default(false)
  role          UserRole  @default(USER)

  Account        Account[]
  Post           Post[]
  PostBookmark   PostBookmark[]
  FavoritePost   FavoritePost[]
  CategoryFollow CategoryFollow[]
  PostView       PostView[]
}

enum PostType {
  NEWS
}

model Post {
  id          String   @id @default(uuid()) @db.Uuid
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String   @db.VarChar(100)
  content     String   @db.VarChar(500)
  authorId    String?  @db.Uuid
  imageUrl    String?
  sourceName  String   @db.VarChar(100)
  sourceUrl   String   @unique
  language    String   @db.VarChar(6)
  countryCode String   @db.VarChar(6)
  type        PostType @default(NEWS)

  author User? @relation(fields: [authorId], references: [id], onDelete: SetNull)

  PostBookmark PostBookmark[]
  FavoritePost FavoritePost[]
  PostCategory PostCategory[]
  PostView     PostView[]
}

model PostBookmark {
  userId    String   @db.Uuid
  postId    String   @db.Uuid
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model FavoritePost {
  userId    String   @db.Uuid
  postId    String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model Category {
  id          String   @id @default(uuid()) @db.Uuid
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String   @db.VarChar(32)
  description String?  @db.VarChar(300)

  PostCategory   PostCategory[]
  CategoryFollow CategoryFollow[]
}

model PostCategory {
  postId     String   @db.Uuid
  categoryId String   @db.Uuid
  createdAt  DateTime @default(now())

  post     Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([postId, categoryId])
}

model CategoryFollow {
  userId     String @db.Uuid
  categoryId String @db.Uuid

  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, categoryId])
}

model PostView {
  userId String @db.Uuid
  postId String @db.Uuid

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}
